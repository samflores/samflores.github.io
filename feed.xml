<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Sparse Thoughts</title>
        <description>Alguns pensamentos dispersos sobre Clojure, Ruby, Rust, Java, JavaScript e programação em geral.
</description>
        <link>http://blog.samflor.es/</link>
        <atom:link href="http://blog.samflor.es/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Tue, 08 Sep 2015 10:48:32 -0300</pubDate>
        <lastBuildDate>Tue, 08 Sep 2015 10:48:32 -0300</lastBuildDate>
        <generator>Jekyll v2.4.0</generator>
        
        <item>
            <title>Começando com Clojure</title>
            <description>&lt;p&gt;Há mais ou menos dois anos eu resolvi me aprofundar no estudo de &lt;em&gt;linguagens de
programação funcionais&lt;/em&gt;. Entre as candidatas estavam &lt;em&gt;Scala&lt;/em&gt;, &lt;em&gt;Erlang&lt;/em&gt;, &lt;em&gt;Haskel&lt;/em&gt;
e &lt;em&gt;Clojure&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Clojure estava em último lugar na minha lista de interesses devido à
experiências anteriores não muito agradáveis com outros &lt;em&gt;Lisps&lt;/em&gt;, mas depois de
ler uma citação do &lt;em&gt;Richard Stallman&lt;/em&gt; achei que deveria tentar de novo (não que
eu costume concordar com ele, mas fiquei curioso):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The most powerful programming language is Lisp. If you don’t know Lisp (or its
variant, Scheme), you don’t know what it means for a programming language to
be powerful and elegant. Once you learn Lisp, you will understand what is
lacking in most other languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;o-que--clojure&quot;&gt;O que é Clojure?&lt;/h2&gt;

&lt;p&gt;Clojure é um &lt;em&gt;Lisp&lt;/em&gt; (eu sei que já deu pra entender isso) e compartilha
características comuns à maioria deles, ou seja, Clojure é uma linguagem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;primariamente funcional;&lt;/li&gt;
  &lt;li&gt;dinâmica;&lt;/li&gt;
  &lt;li&gt;fortemente tipada;&lt;/li&gt;
  &lt;li&gt;homoicônica;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Além de ter suas características próprias:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;roda na &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_virtual_machine&quot;&gt;JVM&lt;/a&gt; &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;;&lt;/li&gt;
  &lt;li&gt;foco na imutabilidade;&lt;/li&gt;
  &lt;li&gt;primitivas de concorrência/paralelismo poderosas;&lt;/li&gt;
  &lt;li&gt;criada por &lt;a href=&quot;https://twitter.com/richhickey&quot;&gt;Rich Hickey&lt;/a&gt; (isso parece ser uma &lt;em&gt;feature&lt;/em&gt; também).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Nossa, quanta coisa legal!  Mas o que significa isso tudo mesmo?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Boa pergunta, curioso leitor. Pretendo respondê-la neste e em outros posts
futuros, mas primeiro vamos ver com o que ela se parece.&lt;/p&gt;

&lt;h2 id=&quot;primeiro-contato&quot;&gt;Primeiro contato&lt;/h2&gt;

&lt;p&gt;Não poderia fazer um artigo introduzindo uma linguagem de programação sem o
clássico &lt;em&gt;hello world&lt;/em&gt;, certo? Pois aqui vai ele:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nada mal, hein?  &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;println&lt;/span&gt;&lt;/code&gt; é uma função que recebe como
parâmetro a string &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;/code&gt;. Tirando o posicionamento
estranho dos parênteses, parece-se muito com a maioria das linguagens de script
por aí.&lt;/p&gt;

&lt;p&gt;E é exatamente esta utilização dos parênteses que reflete as origens da
linguagem. &lt;em&gt;Lisp&lt;/em&gt; vem de &lt;em&gt;&lt;strong&gt;LIS&lt;/strong&gt;t &lt;strong&gt;P&lt;/strong&gt;rocessing&lt;/em&gt;, ou Processamento de Listas.
Uma lista é uma estrutura de dados similar aos conhecidos &lt;em&gt;Arrays&lt;/em&gt; de outras
linguagens.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// JavaScript&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Dexter Morgan&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hannibal Lecter&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Patrick Bateman&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Troque os colchetes por parênteses e remova as vírgulas — ou não, vírgulas
são consideradas &lt;em&gt;whitespace&lt;/em&gt; em Clojure — e você terá uma lista.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;; Essas duas listas são equivalentes&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Dexter Morgan&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hannibal Lecter&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Patrick Bateman&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Dexter Morgan&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&amp;quot;Hannibal Lecter&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&amp;quot;Patrick Bateman&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; Os apóstrofos na frente das listas precisam estar lá.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; Você entenderá o porquê.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; À propósito, ; serve para iniciar um comentário que se&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; estende até o fim da linha&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Mas espera aí? O exemplo do &lt;strong&gt;hello world&lt;/strong&gt; se parece muito com isso, não é?&lt;/em&gt;
Pergunta o intrigado leitor. Continue assim, leitor. Você está indo bem.&lt;/p&gt;

&lt;figure&gt;&lt;img src=&quot;/imgs/lists-everywhere.jpg&quot; alt=&quot;Listas. Listas por toda parte&quot; /&gt;&lt;figcaption&gt;Listas. Listas por toda parte&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Aí está a beleza da coisa. Em Clojure (e em todo &lt;em&gt;Lisp&lt;/em&gt;) utilizamos listas para
escrever código. O que acontece é que ao avaliar uma lista o primeiro elemento
deve ser uma &lt;em&gt;função&lt;/em&gt; (ou, como nesse caso, um nome associado a uma função) e os
outros elementos serão os argumentos dela. Essa é a causa dos apóstrofos no
início das listas de nomes acima. O primeiro elemento, uma &lt;em&gt;string&lt;/em&gt;, não pode
ser executado como uma função, então precisamos indicar que esta trata-se apenas
de uma lista de valores. Mais exemplos:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; =&amp;gt; 42&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;- &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; =&amp;gt; 5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;OK. Isso é estranho!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sim, à primeira vista é estranho mesmo, mas você se acostuma rápido. A sintaxe
dos &lt;em&gt;Lisps&lt;/em&gt; é muito simples: todas as operações são feitas utilizando-se funções
através da avaliação de listas&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. No exemplo acima, o &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;+&lt;/span&gt;&lt;/code&gt;
e o &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;-&lt;/span&gt;&lt;/code&gt; não são operadores especiais com sintaxe especial,
como em outras linguagens. São apenas funções incluídas na biblioteca padrão da
linguagem inteligentemente nomeadas para, adivinhe, somar e subtrair,
respectivamente.&lt;/p&gt;

&lt;p&gt;Essa sintaxe única traz algumas vantagens além da óbvia de ser fácil de
memorizar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;É possível ter mais que 2 operandos em cada operação.&lt;/p&gt;

    &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; 15&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;;; o mesmo que 1 + 2 + 3 + 4 + 5 em outras linguagens&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;lt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;;; em outras linguagens: (x &amp;lt; y) and (y &amp;lt; z) and (z &amp;lt; w)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Não é preciso decorar tabelas de precedências, uma vez que todas as expressões
são bem delimitadas e sem riscos de ambiguidade.&lt;/p&gt;

    &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; &lt;span class=&quot;c1&quot;&gt;// JavaScript&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// = 30&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// = 30.&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// talvez não o que se espere lendo da esquerda pra direita&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// = 60.&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// precisamos delimitar a soma pra que ela ocorra primeiro&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

    &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt; &lt;span class=&quot;c1&quot;&gt;;; Clojure&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; não há como ser ambíguo aqui ...&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; ... mesmo trocando a ordem dos parâmetros&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Listas são usadas para escrever o código&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; e, ao mesmo tempo, são as estruturas
de dados utilizadas para representar o programa em tempo de execução. Este
paralelo entre sintaxe e a estrutura interna do programa, que chamamos de
&lt;strong&gt;homoiconicidade&lt;/strong&gt;, permite que código seja criado e manipulado como &lt;em&gt;dados&lt;/em&gt;.
Linguagens homoicônicas facilitam a metaprogramação e reflexão (temas para um
outro &lt;em&gt;post&lt;/em&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nem tudo é vantagem. Essa sintaxe, em alguns casos, tende a acumular parênteses
amontoados no final de grandes expressões, embora existam formas de contornar
isso. Também é preciso um pouco de prática até se conseguir ler claramente o
código escrito por outras pessoas (pelo menos foi o meu caso).&lt;/p&gt;

&lt;p&gt;Sem dúvidas, os parênteses são os principais motivos de programadores
iniciantes (eu incluso) torcerem o nariz ao se deparar com &lt;em&gt;Lisp&lt;/em&gt;, mas não tema.
Qualquer bom editor vai te ajudar com isso.&lt;/p&gt;

&lt;h2 id=&quot;read-eval-print-loop&quot;&gt;&lt;em&gt;read-eval-print loop&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Antes de continuar a descrever a linguagem, deixa eu explicar como colocar as
mãos no compilador e testar os códigos você mesmo.&lt;/p&gt;

&lt;p&gt;Você pode obter a versão estável mais recente do compilador &lt;a href=&quot;http://repo1.maven.org/maven2/org/clojure/clojure/1.7.0/clojure-1.7.0.zip&quot;&gt;aqui&lt;/a&gt;.
Como eu disse, Clojure utiliza a &lt;em&gt;Java Virtual Machine&lt;/em&gt; para executar seus
programas. Este &lt;em&gt;zip&lt;/em&gt; contém, entre outras coisas, o arquivo
&lt;code&gt;clojure-1.7.0.jar&lt;/code&gt;, que possui tudo o que é necessário para compilar, executar
e testar os seus programas (considerando que você já tem a JVM instalada, caso
contrário, vá &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;aqui&lt;/a&gt; primeiro).&lt;/p&gt;

&lt;p&gt;Para os não-iniciados no universo &lt;em&gt;javistico&lt;/em&gt;, um &lt;em&gt;JAR&lt;/em&gt; é um pacote pelo qual se
distribui um executável ou biblioteca. Algo parecido com as &lt;em&gt;gems&lt;/em&gt; do &lt;em&gt;Ruby&lt;/em&gt;,
&lt;em&gt;eggs&lt;/em&gt; do &lt;em&gt;Python&lt;/em&gt; ou os &lt;em&gt;crates&lt;/em&gt; do &lt;em&gt;Rust&lt;/em&gt;. Existem outras formas de obter e
gerenciar dependências Java/Clojure (&lt;em&gt;Maven&lt;/em&gt;, &lt;em&gt;Leiningem&lt;/em&gt;, &lt;em&gt;Boot&lt;/em&gt;, etc), mas por
enquanto só o download é suficiente.&lt;/p&gt;

&lt;p&gt;Num terminal, execute o seguinte comando no mesmo diretório onde está o arquivo
&lt;code&gt;clojure-1.7.0.jar&lt;/code&gt; que você extraiu do &lt;em&gt;zip&lt;/em&gt; baixado:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;java -cp clojure-1.7.0.jar clojure.main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure&gt;&lt;img src=&quot;/imgs/repl.png&quot; alt=&quot;Bem-vindo ao REPL&quot; /&gt;&lt;figcaption&gt;Bem-vindo ao REPL&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;O &lt;em&gt;prompt&lt;/em&gt; que aparece, aguardando que algo seja digitado, é parte do &lt;strong&gt;REPL&lt;/strong&gt;,
ou &lt;em&gt;Read-Print-Eval Loop&lt;/em&gt;, uma ferramenta distribuída junto com o compilador
que permite a execução interativa de código. Ele &lt;em&gt;lê&lt;/em&gt; o comando digitado,
&lt;em&gt;avalia&lt;/em&gt; e executa as expressões, &lt;em&gt;imprime&lt;/em&gt; o resultado e &lt;em&gt;volta&lt;/em&gt; a esperar
outro comando. &lt;em&gt;REPLs&lt;/em&gt; não são exclusividades dos Lisps, mas costumam integrar
o &lt;em&gt;workflow&lt;/em&gt; dos programadores dessas linguagens mais que os outros. Vamos
tentar uma das expressões que já mostrei: digite &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
e tecle &lt;em&gt;enter&lt;/em&gt;.&lt;/p&gt;

&lt;figure&gt;&lt;img src=&quot;/imgs/repl-ex1.png&quot; alt=&quot;Exemplo 1: uma calculadora bem incomum&quot; /&gt;&lt;figcaption&gt;Exemplo 1: uma calculadora bem incomum&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Expressão lida (&lt;em&gt;read&lt;/em&gt;), avaliada/executada (&lt;em&gt;eval&lt;/em&gt;), resultado impresso
(&lt;em&gt;print&lt;/em&gt;) e prompt esperando uma nova expressão (&lt;em&gt;loop&lt;/em&gt;). Tente usar outras
funções matemáticas (&lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;+&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;-&lt;/span&gt;&lt;/code&gt;,
&lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;/&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;*&lt;/span&gt;&lt;/code&gt;), lógicas
(&lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;/code&gt;,
&lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;/code&gt;), de entrada de dados (&lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;read-line&lt;/span&gt;&lt;/code&gt;)
e de saída (&lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;print&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;println&lt;/span&gt;&lt;/code&gt;). Para
interromper o REPL, pressione &lt;code&gt;Control+C&lt;/code&gt; ou &lt;code&gt;Control+D&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;formas-especiais&quot;&gt;Formas especiais&lt;/h2&gt;

&lt;p&gt;De volta ao conteúdo principal. Agora que já entendemos a ideia de listas serem
avaliadas como chamadas de funções, podemos escrever qualquer tipo de programa
em Clojure, certo? Bem, nem tanto.&lt;/p&gt;

&lt;p&gt;Mais cedo do que você pensa seu programa precisará de mais poderes, como decidir
se precisa ou não executar certa função ou repetir uma execução várias vezes.
Para tal, existem &lt;strong&gt;formas&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; especiais&lt;/strong&gt; que alteram a maneira como
o compilador/interpretador avalia as expressões lidas. Não irei descrever todas
aqui hoje (não são muitas), só o necessário para começar.&lt;/p&gt;

&lt;h3 id=&quot;if&quot;&gt;if&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Yea!&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Nay!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; = é a função usada para comparar valores, equivalente ao&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; operador == da maioria das outras linguagens&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;O &lt;strong&gt;if&lt;/strong&gt; é a forma usada para avaliação condicional de expressões. Ele tem a
mesma cara das outras funções mostradas até agora, né? Essa é a ideia. É uma
lista com 4 elementos, o que poder ser entendido como uma função que recebe 3
argumentos. Porém, diferente de outras listas, nem todos os seus elementos
serão avaliados.&lt;/p&gt;

&lt;p&gt;Se o resultado da avaliação do primeiro argumento for &lt;em&gt;verdadeiro&lt;/em&gt;&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; o valor
da forma como um todo será o resultado da avaliação do segundo argumento
e o terceiro argumento nunca será avaliado. Se o primeiro argumento for algo que
indique falsidade ocorrerá o inverso. O interpretador irá ignorar o segundo
argumento e avaliar o terceiro. Em Ruby seria algo assim:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Yea!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Nay!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;let&quot;&gt;let&lt;/h3&gt;

&lt;p&gt;A essa altura você já está se perguntando porque não declarei nenhuma variável
nos exemplos mostrados. É que tem uma pegadinha aqui. Em Clojure você não
&lt;em&gt;atribui valores&lt;/em&gt; a variáveis como você pode estar acostumado. Você &lt;em&gt;associa um
valor&lt;/em&gt; a um nome. Não parece, mas tem uma diferença. Em &lt;em&gt;C&lt;/em&gt;, por exemplo, você
pode atribuir novos valores a uma variável pré-existente:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%p: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%p: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// a saída seria algo como:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 0x7fff5717e648: 0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 0x7fff5717e648: 9999&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nesse exemplo dá pra ver que a variável &lt;code class=&quot;highlight language-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;/code&gt; é uma referência
sempre à posição da memória &lt;code&gt;0x7fff5717e648&lt;/code&gt;, mesmo depois de mudarmos o valor.
Caso duas &lt;em&gt;threads&lt;/em&gt; estivessem lendo e/ou alterando essa variável
o comportamento seria imprevisível.&lt;/p&gt;

&lt;p&gt;Clojure evita esse problema impedindo — ou pelo menos dificultando — que você
altere o valor de variáveis. Você cria associações, ou &lt;em&gt;bindings&lt;/em&gt;, entre nomes e
valores para um escopo. Isso é feito usando a forma especial &lt;strong&gt;let&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;; cada binding tem acesso aos bindings anteriores&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; 60&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dois (ou mais) argumentos são passados para o &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;let&lt;/span&gt;&lt;/code&gt;. Um
&lt;em&gt;vetor&lt;/em&gt;&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; de &lt;em&gt;bindings&lt;/em&gt;, composto de pares símbolo/valor, e um &lt;em&gt;corpo&lt;/em&gt;, que
é o conjunto de expressões que forma o escopo no qual os símbolos estarão
associados aos valores mencionados. O resultado da última expressão do corpo
será o valor do &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;let&lt;/span&gt;&lt;/code&gt; como um todo.&lt;/p&gt;

&lt;h3 id=&quot;def&quot;&gt;def&lt;/h3&gt;

&lt;p&gt;Eu meio que &lt;em&gt;menti&lt;/em&gt; quando disse que a única forma de dar nomes à valores
é através de &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;let&lt;/span&gt;&lt;/code&gt;. Você vai precisar dar nomes à dados que
viverão por todo o tempo de execução de um programa e não um pequeno escopo.
Imagine as funções que você define, por exemplo, ou valores que são considerados
&lt;em&gt;constantes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para &lt;strong&gt;definir&lt;/strong&gt; esses nomes existe a forma especial &lt;strong&gt;def&lt;/strong&gt;. Nome bem óbvio,
né? Ela é usada da seguinte maneira:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;; um valor muito pouco preciso de 𝛑&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; #&amp;#39;user/pi [I]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;pi&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; 3.14 [II]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;three-pi-over-two&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/ &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; #&amp;#39;user/three-pi-over-two [III]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;three-pi-over-two&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; 4.71 [IV]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sem mistério. Uma lista de três elementos: o símbolo &lt;code&gt;def&lt;/code&gt;, um símbolo que
representa o nome da variável &lt;strong&gt;global&lt;/strong&gt; sendo criada e uma expressão que será
avaliada e o seu resultado atribuído à variável. Observe que o &lt;code&gt;def&lt;/code&gt; retorna
a variável em si (indicado pelos caracteres &lt;code&gt;#&#39;&lt;/code&gt;&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; em &lt;code&gt;[I]&lt;/code&gt; e &lt;code&gt;[III]&lt;/code&gt;) e não
o seu valor. Observe também que os nomes das variáveis retornadas são iniciados
por &lt;code&gt;user/&lt;/code&gt;. Esse é o nome do &lt;strong&gt;namespace&lt;/strong&gt; no qual ela foi definida.
&lt;em&gt;Namespaces&lt;/em&gt; são utilizados para agrupar funções relacionadas e evitar conflitos
de nomes de variáveis. Mais sobre &lt;em&gt;namespaces&lt;/em&gt; em outra oportunidade. &lt;/p&gt;

&lt;p&gt;Depois das definições, quaisquer utilizações dos símbolos usados resulta na
avaliação do mesmo como o valor armazenado na variável correspondente, como pode
ser visto em &lt;code&gt;[II]&lt;/code&gt; e &lt;code&gt;[IV]&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;fn&quot;&gt;fn&lt;/h3&gt;

&lt;p&gt;Como não poderia deixa de ser numa linguagem &lt;strong&gt;funcional&lt;/strong&gt;, é preciso existir
uma forma de definir funções. Isso é trabalho do &lt;strong&gt;fn&lt;/strong&gt; (Clojure tem uma
filosofia de que se uma função ou macro será muito utilizada ele deve ter um
nome bem curto, por isso, &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;fn&lt;/span&gt;&lt;/code&gt; e não &lt;code&gt;function&lt;/code&gt;, por
exemplo).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; #object[user$eval1$fn__2 0x465232e9 &amp;quot;user$eval1$fn__2@465232e9&amp;quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ao entrar a expressão acima no REPL ele devolverá algo bem estranho como
mostrado acima. Não se preocupe com isso. &lt;code&gt;fn&lt;/code&gt; retorna uma função e o REPL tenta
imprimi-la. Essa é a representação interna dela e não é muito útil para nós.&lt;/p&gt;

&lt;p&gt;Nenhuma novidade na sintaxe. De novo temos uma lista, agora com 3 (ou mais)
elementos. O segundo é um vetor de &lt;em&gt;bindings&lt;/em&gt;, semelhante ao do
&lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;let&lt;/span&gt;&lt;/code&gt;, mas sem os valores. Esses valores só serão informados
quando executarmos a função. À partir do terceiro elemento temos o corpo da
função. Também como no &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;let&lt;/span&gt;&lt;/code&gt;, o corpo compõe o escopo onde
os &lt;em&gt;bindings&lt;/em&gt; estarão acessíveis e o valor da avaliação da última expressão do
corpo será o valor de retorno da função. No entanto, esse corpo não é executado
de imediado, apenas quando a função for “chamada”.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Só tem um problema, como eu chamo essa função?&lt;/em&gt; Mais uma vez surpreende o
antenado leitor fazendo a pergunta certa.&lt;/p&gt;

&lt;p&gt;Já sabemos que uma função será avaliada quando for o primeiro elemento de uma
lista, então podemos fazer isso:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Dexter&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; &amp;quot;Hello, Dexter&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jack&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; &amp;quot;Hello, Jack&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Mas isso não é muito prático nem reusável, afinal nas duas execuções duas
cópias distintas da função são criadas. Sem falar que seria loucura ficar
copiando funções de uma lado pro outro. Podemos fazer melhor. E se você está
mesmo acompanhando o post — ou já programou em JavaScript&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; — sabe muito
bem o que fazer:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;greet&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; #&amp;#39;user/greet&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Dexter&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; &amp;quot;Hello, Dexter&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jack&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; &amp;quot;Hello, Jack&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lembra da &lt;em&gt;homoiconicidade&lt;/em&gt;? Código é dado, e como tal pode ser associado
a nomes como qualquer outro tipo. E a necessidade de se atribuir nomes a funções
é tão comum que existe uma forma ainda mais prática de se fazer isso:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; #&amp;#39;user/greet&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Compare com o exemplo anterior. A criação da função, com
&lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;fn&lt;/span&gt;&lt;/code&gt;, e a atribuição do nome, com &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;def&lt;/span&gt;&lt;/code&gt;,
podem ser reduzidas para apenas um passo com a macro &lt;code class=&quot;highlight language-clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;defn&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cenas-dos-prximos-captulos&quot;&gt;Cenas dos próximos capítulos&lt;/h2&gt;

&lt;p&gt;Se você chegou até aqui, acredito que esteja realmente interessado em Clojure
e espero que minhas explicações tenham sido claras o suficiente (se não foram,
fique à vontade para pedir esclarecimentos e deixar sugestões nos comentários).&lt;/p&gt;

&lt;p&gt;Este &lt;em&gt;post&lt;/em&gt; não chegou nem a arranhar a superfície da linguagem, porém já ficou
grande o bastante para darmos por encerrado o dia de trabalho. Mas não sem antes
deixar registrado o que vem por ai (sem pretensão de fazer uma lista exaustiva
nem definir alguma ordem ou periodicidade):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;listas, vetores, conjuntos e mapas;&lt;/li&gt;
  &lt;li&gt;loops e recursividade;&lt;/li&gt;
  &lt;li&gt;organizando código em &lt;em&gt;namespaces&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;fazendo as coisas do jeito funcional;&lt;/li&gt;
  &lt;li&gt;trabalhando com imutabilidade;&lt;/li&gt;
  &lt;li&gt;paralelismo e concorrência;&lt;/li&gt;
  &lt;li&gt;Clojure(Script) conversando com o mundo Java(Script);&lt;/li&gt;
  &lt;li&gt;macros: código que manipula código;&lt;/li&gt;
  &lt;li&gt;desenvolvimento web com Clojure;&lt;/li&gt;
  &lt;li&gt;ferramentas de &lt;em&gt;build&lt;/em&gt;: &lt;code&gt;leiningen&lt;/code&gt; e &lt;code&gt;boot&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;como escrever testes;&lt;/li&gt;
  &lt;li&gt;Single Page Applications com ClojureScript (e React?);&lt;/li&gt;
  &lt;li&gt;sua sugestão.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Até breve (espero).&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Existem também implementações que compilam para a &lt;a href=&quot;http://github.com/clojure/clojure-clr&quot;&gt;CLR&lt;/a&gt; e para &lt;a href=&quot;http://github.com/clojure/clojurescript&quot;&gt;JavaScript&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Nem sempre o primeiro elemento é uma função. Existem também &lt;em&gt;macros&lt;/em&gt; e &lt;em&gt;formas especiais&lt;/em&gt;, mas a sintaxe não muda. Podemos generalizar e dizer que tudo são funções. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Tradicionalmente Lisps usam apenas listas para representar código. Clojure usa outras estruturas, como &lt;em&gt;vetores&lt;/em&gt; e &lt;em&gt;mapas&lt;/em&gt;. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Uma forma é qualquer coisa que possa avaliada. Existe uma sútil diferença entre &lt;em&gt;formas&lt;/em&gt; e &lt;em&gt;expressões&lt;/em&gt;, mas para todos os efeitos podemos usas as duas palavras indistintamente. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;Quaisquer valores diferentes de &lt;code&gt;nil&lt;/code&gt; e &lt;code&gt;false&lt;/code&gt; serão considerados verdadeiros numa avaliação lógica. É o comportamento já conhecido por programadores Ruby. Em C &lt;code&gt;0&lt;/code&gt; é considerado falso, em Clojure não. Assim como listas vazias &lt;code&gt;&#39;()&lt;/code&gt;, que também indicam falsidade em outros Lisps e indicam verdade em Clojure. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;Mais sobre vetores em outra oportunidade. Por enquanto basta saber que são como listas, mas tem colchetes &lt;code&gt;[]&lt;/code&gt;, no lugar dos parênteses &lt;code&gt;()&lt;/code&gt;. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;&lt;code&gt;#&#39;&lt;/code&gt; é um exemplo de uma &lt;em&gt;macro de leitura&lt;/em&gt;. Simplesmente uma forma mais sucinta de executar alguma função. Nesse caso &lt;code&gt;#&#39;user/pi&lt;/code&gt; equivale a &lt;code&gt;(var user/pi)&lt;/code&gt;. Existem várias outras macros de leitura, que devem ser exploradas em &lt;em&gt;posts&lt;/em&gt; mais apropriados. &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot;&gt;
      &lt;p&gt;É muito comum em JavaScript associarmos funções sem nome a variáveis: &lt;code class=&quot;highlight language-javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
            <pubDate>Mon, 07 Sep 2015 21:50:00 -0300</pubDate>
            <link>http://blog.samflor.es/comecando-com-clojure</link>
            <guid isPermaLink="true">http://blog.samflor.es/comecando-com-clojure</guid>
            
            
            <category>clojure</category>
            
        </item>
        
    </channel>
</rss>
